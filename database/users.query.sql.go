// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.query.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (
  id, first_name, last_name, email_address, role, keycloak_uid
) VALUES (
  ?, ?, ?, ?, ?, ?
)
`

type CreateUserParams struct {
	ID           string
	FirstName    string
	LastName     string
	EmailAddress string
	Role         UsersRole
	KeycloakUid  string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.EmailAddress,
		arg.Role,
		arg.KeycloakUid,
	)
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users
SET status = 'DELETED'
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getActiveKeycloakUser = `-- name: GetActiveKeycloakUser :one
SELECT id, first_name, last_name, email_address, keycloak_uid, role, status, created_at, updated_at FROM users
WHERE keycloak_uid = ? AND status = 'ACTIVE' LIMIT 1
`

func (q *Queries) GetActiveKeycloakUser(ctx context.Context, keycloakUid string) (User, error) {
	row := q.db.QueryRowContext(ctx, getActiveKeycloakUser, keycloakUid)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.EmailAddress,
		&i.KeycloakUid,
		&i.Role,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, first_name, last_name, email_address, keycloak_uid, role, status, created_at, updated_at FROM users
WHERE id = ? AND status = 'ACTIVE' LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.EmailAddress,
		&i.KeycloakUid,
		&i.Role,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, first_name, last_name, email_address, keycloak_uid, role, status, created_at, updated_at FROM users
WHERE email_address = ? AND status = 'ACTIVE' LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, emailAddress string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, emailAddress)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.EmailAddress,
		&i.KeycloakUid,
		&i.Role,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, first_name, last_name, email_address, keycloak_uid, role, status, created_at, updated_at FROM users
WHERE status ='ACTIVE'
ORDER BY created_at
LIMIT ? OFFSET ?
`

type GetUsersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.EmailAddress,
			&i.KeycloakUid,
			&i.Role,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
